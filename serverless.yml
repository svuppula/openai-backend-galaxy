
service: collaborators-world-api

frameworkVersion: '3'

provider:
  name: aws
  runtime: nodejs18.x
  stage: ${opt:stage, 'prod'}
  region: ${opt:region, 'us-east-1'}
  memorySize: 1024
  timeout: 29
  logRetentionInDays: 30
  versionFunctions: true
  
  # Configure API Gateway
  apiGateway:
    minimumCompressionSize: 1024
    shouldStartNameWithService: true
    binaryMediaTypes:
      - 'image/*'
      - 'audio/*'
      - 'application/zip'
      - 'application/octet-stream'
  
  # Environment variables
  environment:
    NODE_ENV: production
    STAGE: ${self:provider.stage}
    TEMP_DIR: '/tmp'
    CACHE_TTL: 3600
    
  # Configure IAM role
  iam:
    role:
      statements:
        - Effect: Allow
          Action:
            - logs:CreateLogGroup
            - logs:CreateLogStream
            - logs:PutLogEvents
          Resource: arn:aws:logs:*:*:*
        - Effect: Allow
          Action:
            - s3:PutObject
            - s3:GetObject
            - s3:DeleteObject
          Resource: !Join ['', ['arn:aws:s3:::', !Ref TtsOutputBucket, '/*']]

functions:
  api:
    handler: src/server.handler
    events:
      - http:
          path: /{proxy+}
          method: any
          cors: true
    environment:
      BASE_URL: !Join ['', ['https://', !Ref ApiGatewayRestApi, '.execute-api.', '${self:provider.region}', '.amazonaws.com/', '${self:provider.stage}']]
      TTS_BUCKET: !Ref TtsOutputBucket
    reservedConcurrency: 500  # For higher scale
    provisionedConcurrency: 10  # For faster response times

package:
  individually: true
  exclude:
    - .git/**
    - test/**
    - coverage/**
    - node_modules/aws-sdk/**
    - '**/*.test.js'
    - README.md

plugins:
  - serverless-offline
  - serverless-webpack

custom:
  webpack:
    webpackConfig: webpack.config.js
    packager: 'npm'
    includeModules: true
    excludeFiles: '**/*.test.js'
    concurrency: 5

  serverless-offline:
    httpPort: 3000
    noPrependStageInUrl: true

resources:
  Resources:
    # S3 bucket for TTS output files
    TtsOutputBucket:
      Type: 'AWS::S3::Bucket'
      Properties:
        CorsConfiguration:
          CorsRules:
            - AllowedHeaders: ['*']
              AllowedMethods: [GET, PUT, POST, DELETE]
              AllowedOrigins: ['*']
              MaxAge: 3000
        LifecycleConfiguration:
          Rules:
            - Id: DeleteAfter24Hours
              Status: Enabled
              ExpirationInDays: 1  # Auto-delete files after 1 day to save storage
    
    # CloudFront distribution for global content delivery
    CloudFrontDistribution:
      Type: AWS::CloudFront::Distribution
      Properties:
        DistributionConfig:
          Enabled: true
          DefaultCacheBehavior:
            AllowedMethods:
              - DELETE
              - GET
              - HEAD
              - OPTIONS
              - PATCH
              - POST
              - PUT
            TargetOriginId: ApiGateway
            ForwardedValues:
              QueryString: true
              Headers:
                - Accept
                - Authorization
                - Content-Type
            ViewerProtocolPolicy: redirect-to-https
          Origins:
            - DomainName: !Join ['', [!Ref ApiGatewayRestApi, '.execute-api.', '${self:provider.region}', '.amazonaws.com']]
              Id: ApiGateway
              CustomOriginConfig:
                HTTPPort: 80
                HTTPSPort: 443
                OriginProtocolPolicy: https-only
          PriceClass: PriceClass_100
          # Add caching for media responses
          CacheBehaviors:
            - PathPattern: /*/media/text-to-speech/*
              TargetOriginId: ApiGateway
              AllowedMethods: [GET, HEAD, OPTIONS]
              ForwardedValues:
                QueryString: true
                Headers: 
                  - 'Origin'
                  - 'Access-Control-Request-Headers'
                  - 'Access-Control-Request-Method'
              ViewerProtocolPolicy: redirect-to-https
              MinTTL: 0
              DefaultTTL: 3600  # Cache for an hour by default
              MaxTTL: 86400  # Maximum cache of 1 day
            - PathPattern: /*/media/generate-thumbnail/*
              TargetOriginId: ApiGateway
              AllowedMethods: [GET, HEAD, OPTIONS]
              ForwardedValues:
                QueryString: true
                Headers: 
                  - 'Origin'
                  - 'Access-Control-Request-Headers'
                  - 'Access-Control-Request-Method'
              ViewerProtocolPolicy: redirect-to-https
              MinTTL: 0
              DefaultTTL: 3600
              MaxTTL: 86400
    
    # DynamoDB for caching (optional, cost-effective alternative to Redis)
    CacheTable:
      Type: AWS::DynamoDB::Table
      Properties:
        TableName: ${self:service}-cache-${self:provider.stage}
        BillingMode: PAY_PER_REQUEST
        AttributeDefinitions:
          - AttributeName: key
            AttributeType: S
        KeySchema:
          - AttributeName: key
            KeyType: HASH
        TimeToLiveSpecification:
          AttributeName: expires
          Enabled: true
